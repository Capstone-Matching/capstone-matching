<!DOCTYPE html>
<html>
<head>
  <style>
    /*body {*/
    /*  font-family: Arial, sans-serif;*/
    /*  background-color: #f2f2f2;*/
    /*  display: flex;*/
    /*  justify-content: center;*/
    /*  align-items: center;*/
    /*  height: 100vh;*/
    /*  margin: 0;*/
    /*}*/

    .container {
      background-color: #fff;
      border: 1px solid #ccc;
      border-radius: 5px;
      padding: 20px;
      text-align: center;
      max-width: 400px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }

    /*h1, h2 {*/
    /*  color: #333;*/
    /*}*/

    /*p {*/
    /*  color: #555;*/
    /*}*/

    .error {
      color: #d9534f;
    }

    form {
      margin-top: 20px;
    }
  </style>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.min.js"></script>
	<script>
  
function extractText(file) {
    return new Promise((resolve, reject) => {
        var fileReader = new FileReader();

        fileReader.onload = function() {
            var typedarray = new Uint8Array(this.result);

            pdfjsLib.getDocument(typedarray).promise.then(function(pdf) {
                var totalPages = pdf.numPages;
                var promises = [];

                for (var pageNum = 1; pageNum <= totalPages; pageNum++) {
                    promises.push(getPageText(pageNum, pdf));
                }

                Promise.all(promises).then(function(pagesText) {
                    var extractedText = pagesText.join(' ');
                    console.log(extractedText);
                    resolve(extractedText);
                }).catch(reject);
            }).catch(reject);
        };

        fileReader.readAsArrayBuffer(file);
    });

    
    function getPageText(pageNum, pdf) {
      return new Promise(function(resolve, reject) {
          pdf.getPage(pageNum).then(function(page) {
              page.getTextContent().then(function(textContent) {
                  var pageText = '';
                  textContent.items.forEach(function(textItem) {
                      pageText += textItem.str + ' ';
                  });
                  resolve(pageText);
              });
          });
      });
    }
    
    fileReader.readAsArrayBuffer(file);
  }


  
  function parseResume(event) {
    event.preventDefault();
    console.log("test");

    // Access the file input element
    var fileInput = document.getElementById('resume');
    
    // Access the selected file
    var file = fileInput.files[0];
    
    // Perform operations with the file, for example:
    if (file) {
      // Access file details (e.g., name, type, size)
      console.log("File name: ", file.name);
      console.log("File type: ", file.type);
      console.log("File size: ", file.size);
      // return extractText(file);
      
      // Assuming 'file' is obtained from your file input
      extractText(file)
        .then(extractedText => {
          console.log("Extracted Text:", extractedText);
          // You can use the extracted text here or pass it to another function
          var courseId = document.getElementById('course_id').value; // Get the course ID value
          var resume = extractedText;
          
          // Create a form, set course_id and resume as a hidden input, and submit it after a delay
          setTimeout(function() {
            var form = document.getElementById('redirectForm');
            document.getElementById('redirectCourseId').value = courseId; // Set course_id in the hidden input
            document.getElementById('redirectResume').value = resume; // Set resume in the hidden input
            // form.action = 'http://13.58.230.122:4000/devtest/upload_resume'; // Change the action to the redirection URL
            form.submit();
          }, 2000); // Submit after 2 seconds
        })
        .catch(error => {
          console.error("Error extracting text:", error);
        });
    }
    else {
      return '';
    }
  }
  </script>
    
</head>
<body>
  <div class="container">
    <h1>Development Test Page</h1>
    <p>This is a test page for development purposes.</p>
    
    <form enctype="multipart/form-data" onsubmit="return parseResume(event)">
      <label for="course_id">Course ID:</label>
      <input type="number" id="course_id" name="course_id" required><br><br>
    
      <label for="resume">Upload Resume:</label>
      <input type="file" id="resume" name="resume" accept=".pdf, .doc, .docx" required><br><br>
    
      <input type="submit" value="Submit">
    </form>
    
    <form action="/devtest/upload_resume" method="post" style="display: none;" id="redirectForm">
      <input type="hidden" name="course_id" id="redirectCourseId">
      <input type="hidden" name="resume" id="redirectResume">

    </form>


    <% if flash[:resume_text].present? %>
      <h2>Resume Text</h2>
      <pre flash[:resume_text] %></pre>
    <% end %>

    <% if flash[:error].present? %>
      <p class="error"><%= flash[:error] %></p>
    <% end %>

    <h2>Classification Result</h2>
    <p>The most similar job description is:</p>
    <% if flash[:most_similar_job_description].present? %>
      <p><%= flash[:most_similar_job_description] %></p>
    <% end %>
    <p>with a score of:</p>
    <% if flash[:similarity_score].present? %>
      <p><%= flash[:similarity_score] %></p>
    <% end %>
  </div>
</body>
</html>
